// Code generated by thriftrw v1.17.0. DO NOT EDIT.
// @generated

package noerror

import (
	"fmt"
	"go.uber.org/thriftrw/wire"
	"go.uber.org/zap/zapcore"
	"strings"
)

// NoErrorService_SetValue_Args represents the arguments for the NoErrorService.setValue function.
//
// The arguments for setValue are sent and received over the wire as this struct.
type NoErrorService_SetValue_Args struct {
	Key   *Key    `json:"key,omitempty"`
	Value *string `json:"value,omitempty"`
}

// ToWire translates a NoErrorService_SetValue_Args struct into a Thrift-level intermediate
// representation. This intermediate representation may be serialized
// into bytes using a ThriftRW protocol implementation.
//
// An error is returned if the struct or any of its fields failed to
// validate.
//
//   x, err := v.ToWire()
//   if err != nil {
//     return err
//   }
//
//   if err := binaryProtocol.Encode(x, writer); err != nil {
//     return err
//   }
func (v *NoErrorService_SetValue_Args) ToWire() (wire.Value, error) {
	var (
		fields [2]wire.Field
		i      int = 0
		w      wire.Value
		err    error
	)

	if v.Key != nil {
		w, err = v.Key.ToWire()
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 1, Value: w}
		i++
	}
	if v.Value != nil {
		w, err = wire.NewValueString(*(v.Value)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 2, Value: w}
		i++
	}

	return wire.NewValueStruct(wire.Struct{Fields: fields[:i]}), nil
}

// FromWire deserializes a NoErrorService_SetValue_Args struct from its Thrift-level
// representation. The Thrift-level representation may be obtained
// from a ThriftRW protocol implementation.
//
// An error is returned if we were unable to build a NoErrorService_SetValue_Args struct
// from the provided intermediate representation.
//
//   x, err := binaryProtocol.Decode(reader, wire.TStruct)
//   if err != nil {
//     return nil, err
//   }
//
//   var v NoErrorService_SetValue_Args
//   if err := v.FromWire(x); err != nil {
//     return nil, err
//   }
//   return &v, nil
func (v *NoErrorService_SetValue_Args) FromWire(w wire.Value) error {
	var err error

	for _, field := range w.GetStruct().Fields {
		switch field.ID {
		case 1:
			if field.Value.Type() == wire.TBinary {
				var x Key
				x, err = _Key_Read(field.Value)
				v.Key = &x
				if err != nil {
					return err
				}

			}
		case 2:
			if field.Value.Type() == wire.TBinary {
				var x string
				x, err = field.Value.GetString(), error(nil)
				v.Value = &x
				if err != nil {
					return err
				}

			}
		}
	}

	return nil
}

// String returns a readable string representation of a NoErrorService_SetValue_Args
// struct.
func (v *NoErrorService_SetValue_Args) String() string {
	if v == nil {
		return "<nil>"
	}

	var fields [2]string
	i := 0
	if v.Key != nil {
		fields[i] = fmt.Sprintf("Key: %v", *(v.Key))
		i++
	}
	if v.Value != nil {
		fields[i] = fmt.Sprintf("Value: %v", *(v.Value))
		i++
	}

	return fmt.Sprintf("NoErrorService_SetValue_Args{%v}", strings.Join(fields[:i], ", "))
}

func _String_EqualsPtr(lhs, rhs *string) bool {
	if lhs != nil && rhs != nil {

		x := *lhs
		y := *rhs
		return (x == y)
	}
	return lhs == nil && rhs == nil
}

// Equals returns true if all the fields of this NoErrorService_SetValue_Args match the
// provided NoErrorService_SetValue_Args.
//
// This function performs a deep comparison.
func (v *NoErrorService_SetValue_Args) Equals(rhs *NoErrorService_SetValue_Args) bool {
	if v == nil {
		return rhs == nil
	} else if rhs == nil {
		return false
	}
	if !_Key_EqualsPtr(v.Key, rhs.Key) {
		return false
	}
	if !_String_EqualsPtr(v.Value, rhs.Value) {
		return false
	}

	return true
}

// MarshalLogObject implements zapcore.ObjectMarshaler, enabling
// fast logging of NoErrorService_SetValue_Args.
func (v *NoErrorService_SetValue_Args) MarshalLogObject(enc zapcore.ObjectEncoder) (err error) {
	if v == nil {
		return nil
	}
	if v.Key != nil {
		enc.AddString("key", (string)(*v.Key))
	}
	if v.Value != nil {
		enc.AddString("value", *v.Value)
	}
	return err
}

// GetKey returns the value of Key if it is set or its
// zero value if it is unset.
func (v *NoErrorService_SetValue_Args) GetKey() (o Key) {
	if v != nil && v.Key != nil {
		return *v.Key
	}

	return
}

// IsSetKey returns true if Key is not nil.
func (v *NoErrorService_SetValue_Args) IsSetKey() bool {
	return v != nil && v.Key != nil
}

// GetValue returns the value of Value if it is set or its
// zero value if it is unset.
func (v *NoErrorService_SetValue_Args) GetValue() (o string) {
	if v != nil && v.Value != nil {
		return *v.Value
	}

	return
}

// IsSetValue returns true if Value is not nil.
func (v *NoErrorService_SetValue_Args) IsSetValue() bool {
	return v != nil && v.Value != nil
}

// MethodName returns the name of the Thrift function as specified in
// the IDL, for which this struct represent the arguments.
//
// This will always be "setValue" for this struct.
func (v *NoErrorService_SetValue_Args) MethodName() string {
	return "setValue"
}

// EnvelopeType returns the kind of value inside this struct.
//
// This will always be Call for this struct.
func (v *NoErrorService_SetValue_Args) EnvelopeType() wire.EnvelopeType {
	return wire.Call
}

// NoErrorService_SetValue_Helper provides functions that aid in handling the
// parameters and return values of the NoErrorService.setValue
// function.
var NoErrorService_SetValue_Helper = struct {
	// Args accepts the parameters of setValue in-order and returns
	// the arguments struct for the function.
	Args func(
		key *Key,
		value *string,
	) *NoErrorService_SetValue_Args

	// IsException returns true if the given value can be thrown
	// by setValue.
	//
	// An exception can be thrown by setValue only if the
	// type was mentioned in the 'throws' section of the IDL.
	IsException func(interface{}) bool

	// WrapResponse returns the result struct for setValue
	// given the value returned by it. The value should hold
	// an exception that can be thrown by setValue.
	//
	// This allows mapping exceptions returned by setValue into a
	// serializable result struct. WrapResponse returns a
	// non-nil error if the provided error cannot be thrown by
	// setValue.
	//
	//   val, err := setValue(args)
	//   if err != nil {
	//     return err
	//   }
	//   result, err := NoErrorService_SetValue_Helper.WrapResponse(val)
	//   if err != nil {
	//     return fmt.Errorf("unexpected error from setValue: %v", err)
	//   }
	//   serialize(result)
	WrapResponse func(interface{}) (*NoErrorService_SetValue_Result, error)

	// UnwrapResponse takes the result struct for setValue
	// and returns the exception returned by it (if any).
	//
	// The error is non-nil only if setValue returned an
	// unrecognized value.
	//
	//   result := deserialize(bytes)
	//    err := NoErrorService_SetValue_Helper.UnwrapResponse(result)
	//   if err != nil {
	//     return err
	//   }
	UnwrapResponse func(*NoErrorService_SetValue_Result) error
}{}

func init() {
	NoErrorService_SetValue_Helper.Args = func(
		key *Key,
		value *string,
	) *NoErrorService_SetValue_Args {
		return &NoErrorService_SetValue_Args{
			Key:   key,
			Value: value,
		}
	}

	NoErrorService_SetValue_Helper.IsException = func(err interface{}) bool {
		switch err.(type) {
		default:
			return false
		}
	}

	NoErrorService_SetValue_Helper.WrapResponse = func(val interface{}) (*NoErrorService_SetValue_Result, error) {
		if val == nil {
			return &NoErrorService_SetValue_Result{}, nil
		}

		return nil, fmt.Errorf("WrapResponse received an unrecognized type for NoErrorService_SetValue_Result: %v", val)
	}
	NoErrorService_SetValue_Helper.UnwrapResponse = func(result *NoErrorService_SetValue_Result) (err error) {
		return
	}

}

// NoErrorService_SetValue_Result represents the result of a NoErrorService.setValue function call.
//
// The result of a setValue execution is sent and received over the wire as this struct.
type NoErrorService_SetValue_Result struct {
}

// ToWire translates a NoErrorService_SetValue_Result struct into a Thrift-level intermediate
// representation. This intermediate representation may be serialized
// into bytes using a ThriftRW protocol implementation.
//
// An error is returned if the struct or any of its fields failed to
// validate.
//
//   x, err := v.ToWire()
//   if err != nil {
//     return err
//   }
//
//   if err := binaryProtocol.Encode(x, writer); err != nil {
//     return err
//   }
func (v *NoErrorService_SetValue_Result) ToWire() (wire.Value, error) {
	var (
		fields [0]wire.Field
		i      int = 0
	)

	return wire.NewValueStruct(wire.Struct{Fields: fields[:i]}), nil
}

// FromWire deserializes a NoErrorService_SetValue_Result struct from its Thrift-level
// representation. The Thrift-level representation may be obtained
// from a ThriftRW protocol implementation.
//
// An error is returned if we were unable to build a NoErrorService_SetValue_Result struct
// from the provided intermediate representation.
//
//   x, err := binaryProtocol.Decode(reader, wire.TStruct)
//   if err != nil {
//     return nil, err
//   }
//
//   var v NoErrorService_SetValue_Result
//   if err := v.FromWire(x); err != nil {
//     return nil, err
//   }
//   return &v, nil
func (v *NoErrorService_SetValue_Result) FromWire(w wire.Value) error {

	for _, field := range w.GetStruct().Fields {
		switch field.ID {
		}
	}

	return nil
}

// String returns a readable string representation of a NoErrorService_SetValue_Result
// struct.
func (v *NoErrorService_SetValue_Result) String() string {
	if v == nil {
		return "<nil>"
	}

	var fields [0]string
	i := 0

	return fmt.Sprintf("NoErrorService_SetValue_Result{%v}", strings.Join(fields[:i], ", "))
}

// Equals returns true if all the fields of this NoErrorService_SetValue_Result match the
// provided NoErrorService_SetValue_Result.
//
// This function performs a deep comparison.
func (v *NoErrorService_SetValue_Result) Equals(rhs *NoErrorService_SetValue_Result) bool {
	if v == nil {
		return rhs == nil
	} else if rhs == nil {
		return false
	}

	return true
}

// MarshalLogObject implements zapcore.ObjectMarshaler, enabling
// fast logging of NoErrorService_SetValue_Result.
func (v *NoErrorService_SetValue_Result) MarshalLogObject(enc zapcore.ObjectEncoder) (err error) {
	if v == nil {
		return nil
	}
	return err
}

// MethodName returns the name of the Thrift function as specified in
// the IDL, for which this struct represent the result.
//
// This will always be "setValue" for this struct.
func (v *NoErrorService_SetValue_Result) MethodName() string {
	return "setValue"
}

// EnvelopeType returns the kind of value inside this struct.
//
// This will always be Reply for this struct.
func (v *NoErrorService_SetValue_Result) EnvelopeType() wire.EnvelopeType {
	return wire.Reply
}
